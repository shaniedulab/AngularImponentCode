
import { Request, Response, NextFunction } from 'express';
import logger from '../logger';
import AuthRepository from '../utils/auth.utils';
import axios from 'axios';
import bcrypt from 'bcrypt';

export default class AuthController {
  static config = {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  };
  static login = async(req: Request, res: Response, next: NextFunction) => {

    try {
      const username = req.body.email;
      const password = req.body.password;

      const userData = {
        username,
        password,
        grant_type: 'password',
        client_id: process.env.keyCloakClient,
        client_secret: process.env.keyCloakClientSecret,
      };
      // Check if the user exists
      const user = await AuthRepository.getUser(username);
      if (!user) {
        return res.status(404).json({
          status: 404,
          message: 'User not found',
        });
      }

      try {
        // Authenticate with Keycloak
        const keycloak = await axios.post(
          `${process.env.keyCloakUrl}/realms/${process.env.keyCloakRealm}/protocol/openid-connect/token`,
          userData,
          this.config
        );
        // Authentication successful
        return res.status(200).json({
          status: 'success',
          message: 'login successful',
          data: keycloak.data.access_token,
        });
      } catch (e) {
        // Handle Keycloak authentication error
        return res.status(500).json({
          status: 500,
          message: e,
        });
      }
    } catch (e) {
      // Handle other errors
      logger.error(e);
      return res.status(500).json({
        status: 500,
        message: e,
      });
    }
  };

  static register = async(req: Request, res: Response, next: NextFunction) => {
    try {
      const firstName = req.body.firstName;
      const lastName = req.body.lastName;
      const password = req.body.password;
      const email = req.body.email;
      const createUserData = req.body;

      // Hash the user's password
      const saltRounds = 10;
      const salt = bcrypt.genSaltSync(saltRounds);
      createUserData.password = bcrypt.hashSync(createUserData.password, salt);

      // Check if the user already exists with the given email
      const user = await AuthRepository.getUser(email);
      // If the user already exists, return a 404 error
      if (user) {
        return res.status(404).json({
          status: 404,
          message: 'Email Already Exist!',
        });
      }
      const createUser = await AuthRepository.createUser(createUserData);
      // If user creation is successful, proceed to Keycloak registration
      if (createUser) {
        // Prepare data for Keycloak user registration
        const userData = {
          firstName,
          lastName,
          email,
          emailVerified: true,
          enabled: true,
          credentials: [
            {
              type: 'password',
              value: password,
              temporary: false,
            },
          ],
        };
        // Prepare data for Keycloak admin authentication
        const adminData = {
          client_id: process.env.keyCloakClient,
          client_secret: process.env.keyCloakClientSecret,
          grant_type: 'client_credentials',
        };
        // Authenticate with Keycloak admin credentials to obtain an access token
        try {
          const keycloak = await axios.post(
            `${process.env.keyCloakUrl}/realms/${process.env.keyCloakRealm}/protocol/openid-connect/token`,
            adminData,
            this.config
          );
          // Use the obtained access token for authorization in the header
          const header = {
            headers: {
              'Content-Type': 'application/json',
              Authorization: `${keycloak.data.token_type} ${keycloak.data.access_token}`,
            },
          };
          if (keycloak) {
            // Register the user in Keycloak
            const registerKeycloak = await axios.post(
              `${process.env.keyCloakUrl}/admin/realms/${process.env.keyCloakRealm}/users`,
              userData,
              header
            );
            if (registerKeycloak) {
              // If user registration in Keycloak is successful, return a success response
              return res.status(200).json({
                status: 'success',
                message: 'Register successful',
              });
            }
          }
        } catch (e) {
          // Handle Keycloak authentication error
          return res.status(500).json({
            status: 500,
            message: e,
          });
        }
      }
    } catch (e) {
      // Handle other errors
      logger.error(e);
      return res.status(500).json({
        status: 500,
        message: e,
      });
    }
  };
}
